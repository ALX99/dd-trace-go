name: Multi-OS Unit and Integration Tests

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request:
    branches:
      - "**"

env:
  total-runners: 10

jobs:
  runner-indexes:
    runs-on: ubuntu-latest
    name: Generate runner indexes
    outputs:
      json: ${{ steps.generate-index-list.outputs.json }}
    steps:
      - id: generate-index-list
        run: |
          MAX_INDEX=$((${{ env.total-runners }}-1))
          INDEX_LIST=$(seq 0 ${MAX_INDEX})
          INDEX_JSON=$(jq --null-input --compact-output '. |= [inputs]' <<< ${INDEX_LIST})
          echo "::set-output name=json::${INDEX_JSON}"

  test-multi-os:
    needs:
      - runner-indexes
    strategy:
      matrix:
        runs-on: [ macos-latest, windows-latest, ubuntu-latest ]
        go-version: [ "1.17", "1.18", "1.19"]
        runner-index: ${{ fromjson(needs.runner-indexes.outputs.json) }}
      fail-fast: false
    runs-on: ${{ matrix.runs-on }}
    env:
       REPORT: gotestsum-report.xml # path to where test results will be saved
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'DataDog/dd-trace-go'
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
          cache: true
      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest
      - name: Mac OS Coreutils
        if: matrix.runs-on == 'macos-latest'
        run: brew install coreutils
      - name: "Runner ${{ matrix.runner-index }}: Test Core and Contrib (No Integration Tests)"
        shell: bash
        run: |
            go list ./... | grep -v -e grpc.v12 -e google.golang.org/api -e sarama -e confluent-kafka-go -e cmemprof | sort >packages.txt
            if [[ $RUNNER_OS == "macOS" ]]; then
                gsplit -nl/${{ env.total-runners }} -d packages.txt
            else
                split -nl/${{ env.total-runners }} -d packages.txt
            fi
            ls x*
            gotestsum --junitfile ${REPORT} -- $(cat x0${{ matrix.runner-index }}) -v -coverprofile=coverage.txt -covermode=atomic

      - name: Upload the results to Datadog CI App
        if: always()
        uses: ./.github/actions/dd-ci-upload
        with:
          dd-api-key: ${{ secrets.DD_CI_API_KEY }}
          files: ${{ env.REPORT }}
          tags: go:${{ matrix.go-version }},arch:${{ runner.arch }},os:${{ runner.os }},distribution:${{ runner.distribution }}

      - name: Upload Coverage
        if: always()
        shell: bash
        run: bash <(curl -s https://codecov.io/bash)
